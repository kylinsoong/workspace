select extractValue(data, '/executionPlan/executionPlanHeader/uniqueID') data from executionplan t;

SELECT * FROM ITEMS;
SELECT * FROM ITEMSTYPE;
SELECT * FROM ITEMTYPE;
SELECT * FROM RESOURCEBUNDLE;
SELECT * FROM RESOURCEBUNDLE_PARAMINTERNAL;

SELECT * FROM ITEMTYPE;
SELECT * FROM ITEMTYPE WHERE ITEMTYPE.ITEMSTYPEIMPL_ID = '4028c4dd3127e4970131280249360023'
SELECT * FROM ITEMTYPE WHERE ITEMTYPE.IDINTERNAL = '4028c4dd3127e4970131280247a0001b' or ITEMTYPE.IDINTERNAL = '4028c4dd3127e497013128018ec0000c';
SELECT * FROM ITEMSTYPE WHERE ITEMSTYPE.IDINTERNAL = '4028c4dd3127e4970131280249360023';
SELECT * FROM ITEMTYPE WHERE ITEMTYPE.PARENTID = 'ORD1000000';
SELECT * FROM ITEMTYPE WHERE ITEMTYPE.PRIMARYKEY = 'ORD1000000';
SELECT * FROM ITEMTYPE WHERE ITEMTYPE.KEY = 'order001';
SELECT RESOURCEBUNDLE.IDINTERNAL FROM RESOURCEBUNDLE;
SELECT * FROM ITEMTYPE WHERE ITEMTYPE.BUNDLE = '4028c4dd3127e497013127e4997b0003';
SELECT * FROM RESOURCEBUNDLE_PARAMINTERNAL WHERE RESOURCEBUNDLE_PARAMINTERNAL.RESOURCEBUNDLEIMPL_ID = '4028c4dd3127e497013127e4997b0003';

SELECT ITEMTYPE.IDINTERNAL, ITEMTYPE.KEY, ITEMTYPE.UUID, ITEMTYPE.HASCHILD, ITEMTYPE.PRIMARYKEY, ITEMTYPE.PARENTID, ITEMTYPE.CREATEDBY, ITEMTYPE.AUDITTYPE, ITEMTYPE.CREATEDDATE, ITEMTYPE.TYPEID, ITEMTYPE.LOG, ITEMTYPE.BUNDLE, ITEMTYPE.ITEMINTERNAL_INDEX, ITEMTYPE.ITEMTYPEIMPL_ID FROM ITEMTYPE WHERE ITEMTYPE.KEY = 'order001';
SELECT IDINTERNAL, KEY, UUID, HASCHILD, PRIMARYKEY, PARENTID, CREATEDBY, AUDITTYPE, CREATEDDATE, TYPEID, LOG, BUNDLE, ITEMINTERNAL_INDEX, ITEMTYPEIMPL_ID FROM (SELECT ROWNUM r, IDINTERNAL, KEY, UUID, HASCHILD, PRIMARYKEY, PARENTID, CREATEDBY, AUDITTYPE, CREATEDDATE, TYPEID, LOG, BUNDLE, ITEMINTERNAL_INDEX, ITEMTYPEIMPL_ID FROM ITEMTYPE) WHERE r >= 0 AND r < 1;

select * from ITEMTYPE where rownum <= 7 ;
SELECT IDINTERNAL, KEY, UUID, HASCHILD, PRIMARYKEY, PARENTID, CREATEDBY, AUDITTYPE, CREATEDDATE, TYPEID, LOG, BUNDLE, ITEMINTERNAL_INDEX, ITEMTYPEIMPL_ID FROM ITEMTYPE WHERE ITEMTYPEIMPL_ID = '4028c4dd3127e4970131280247a0001b';
SELECT RESOURCEBUNDLE.BUNDLEKEY FROM RESOURCEBUNDLE WHERE RESOURCEBUNDLE.IDINTERNAL = '4028c4dd3127e497013127e4997b0003';
SELECT * FROM RESOURCEBUNDLE_PARAMINTERNAL WHERE RESOURCEBUNDLE_PARAMINTERNAL.RESOURCEBUNDLEIMPL_ID = '4028c4dd3127e497013127e4997b0003';
SELECT RESOURCEBUNDLE_PARAMINTERNAL.VALUE FROM RESOURCEBUNDLE_PARAMINTERNAL WHERE RESOURCEBUNDLE_PARAMINTERNAL.RESOURCEBUNDLEIMPL_ID = ?
SELECT IDINTERNAL, KEY, UUID, HASCHILD, PRIMARYKEY, PARENTID, CREATEDBY, AUDITTYPE, CREATEDDATE, TYPEID, LOG, BUNDLE, ITEMINTERNAL_INDEX, ITEMTYPEIMPL_ID FROM ITEMTYPE WHERE ITEMTYPEIMPL_ID = '4028c4dd3127e4970131280247a0001b';
SELECT RESOURCEBUNDLE.BUNDLEKEY FROM RESOURCEBUNDLE WHERE RESOURCEBUNDLE.IDINTERNAL = '4028c4dd3127e497013127e4997b0003';
SELECT RESOURCEBUNDLE_PARAMINTERNAL.VALUE FROM RESOURCEBUNDLE_PARAMINTERNAL WHERE RESOURCEBUNDLE_PARAMINTERNAL.RESOURCEBUNDLEIMPL_ID = '4028c4dd3127e497013127e4997b0003';

SELECT * FROM ORDER_;
SELECT * FROM EXECUTIONPLAN;
SELECT * FROM COMPONENT;
SELECT * FROM PROCESS;
SELECT * FROM AUDITITEM;

SELECT * FROM CLASSIFICATION;
SELECT * FROM CLASSIFICATIONGROUP;
SELECT * FROM MDCLASSVALUETYPE;
SELECT * FROM MOCLASSIFICATIONVALUE;

DELETE FROM CLASSIFICATION;
DELETE FROM MOCLASSIFICATIONVALUE;
DELETE FROM MDCLASSVALUETYPE;
DELETE FROM CLASSIFICATIONGROUP;

DELETE FROM RESOURCEBUNDLEPARAMS;
DELETE FROM AUDITITEM;

select * from orchsubject;
select * from subject_observers;
select * from subject_to_expdependency;
select * from subjectdef_to_property;

CREATE TABLE MIGRATIONPROCLOG(
ROW_NUM NUMBER(19,0) NOT NULL,
MIG_TYPE NUMBER(2,0) NOT NULL,
MIG_KRY VARCHAR2(100),
CONSTRAINT MIGRATIONPROCLOG_HID_PK PRIMARY KEY(ROW_NUM, MIG_TYPE));

DROP TABLE MIGRATIONPROCLOG;

SELECT * FROM  USER_CONSTRAINTS WHERE TABLE_NAME = 'MIGRATIONPROCLOG';
INSERT INTO MIGRATIONPROCLOG VALUES(1, 1, '07211614');
INSERT INTO MIGRATIONPROCLOG VALUES(2, 1, 'order001');
INSERT INTO MIGRATIONPROCLOG VALUES(3, 1, 'order002');
INSERT INTO MIGRATIONPROCLOG VALUES(1, 3, '');
INSERT INTO MIGRATIONPROCLOG VALUES(1, 4, '');
INSERT INTO MIGRATIONPROCLOG VALUES(1, 5, '');


CREATE TABLE MIGRATIONPROCLOG(ROW_NUM NUMBER(19,0)NOT NULL,MIG_TYPE NUMBER(2,0),MIG_KEY VARCHAR2(100),CONSTRAINT MIGRATIONPROCLOG_HID_PK PRIMARY KEY(ROW_NUM, MIG_TYPE));
SELECT MIGRATIONPROCLOG.ROW_NUM, MIGRATIONPROCLOG.MIG_TYPE, MIGRATIONPROCLOG.MIG_KEY FROM MIGRATIONPROCLOG WHERE MIGRATIONPROCLOG.MIG_TYPE = 1;

SELECT * FROM MDCLASSGROUPTYPE;
SELECT * FROM MDCLASSVALUETYPE;
SELECT * FROM MDMOCLASSVALUETYPE;
SELECT * FROM MDCLASSTYPE;
SELECT IDINTERNAL, KEY, UUID, HASCHILD, PRIMARYKEY, PARENTID, CREATEDBY, AUDITTYPE, CREATEDDATE, TYPEID, LOG, BUNDLE, ITEMINTERNAL_INDEX, ITEMTYPEIMPL_ID FROM ITEMTYPE WHERE KEY = 'classification';
SELECT * FROM ITEMTYPE;

SELECT * FROM MIGRATIONPROCLOG;
DELETE FROM MIGRATIONPROCLOG;
SELECT JMSMESSAGEID,JMSEXCEPTIONTEXT FROM(SELECT ROWNUM r, JMSMESSAGEID,JMSEXCEPTIONTEXT FROM JMSEXCEPTIONS) WHERE r >= 1 AND r < 2 ; 
SELECT REQUEST_ID, REQUEST_TEXT, UPDATED FROM (SELECT ROWNUM r, REQUEST_ID, REQUEST_TEXT, UPDATED FROM REQUEST)WHERE r >= 1 AND r < 2 ;
DELETE FROM MOCLASSIFICATIONVALUE
DELETE FROM MDMOCLASSVALUETYPE
DELETE FROM MDCLASSVALUETYPE
DELETE FROM MDCLASSGROUPTYPE
--audititems
SELECT * FROM ITEMS;
SELECT * FROM ITEMSTYPE;
SELECT * FROM ITEMTYPE;
SELECT * FROM RESOURCEBUNDLE;
SELECT * FROM RESOURCEBUNDLE_PARAMINTERNAL;

DELETE FROM RESOURCEBUNDLE
SELECT COUNT(*) FROM ORDERS;
SELECT COUNT(*) FROM EXECUTIONPLAN;
SELECT COUNT(*) FROM COMPONENT;

-- quartz reference
CREATE TABLE qrtz_job_details(
    JOB_NAME  VARCHAR2(200) NOT NULL,
    JOB_GROUP VARCHAR2(200) NOT NULL,
    DESCRIPTION VARCHAR2(250) NULL,
    JOB_CLASS_NAME   VARCHAR2(250) NOT NULL, 
    IS_DURABLE VARCHAR2(1) NOT NULL,
    IS_VOLATILE VARCHAR2(1) NOT NULL,
    IS_STATEFUL VARCHAR2(1) NOT NULL,
    REQUESTS_RECOVERY VARCHAR2(1) NOT NULL,
    JOB_DATA BLOB NULL,
    PRIMARY KEY (JOB_NAME,JOB_GROUP)
);
CREATE TABLE qrtz_job_listeners(
    JOB_NAME  VARCHAR2(200) NOT NULL, 
    JOB_GROUP VARCHAR2(200) NOT NULL,
    JOB_LISTENER VARCHAR2(200) NOT NULL,
    PRIMARY KEY (JOB_NAME,JOB_GROUP,JOB_LISTENER),
    FOREIGN KEY (JOB_NAME,JOB_GROUP) 
	REFERENCES QRTZ_JOB_DETAILS(JOB_NAME,JOB_GROUP)
);
CREATE TABLE qrtz_triggers(
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    JOB_NAME  VARCHAR2(200) NOT NULL, 
    JOB_GROUP VARCHAR2(200) NOT NULL,
    IS_VOLATILE VARCHAR2(1) NOT NULL,
    DESCRIPTION VARCHAR2(250) NULL,
    NEXT_FIRE_TIME NUMBER(13) NULL,
    PREV_FIRE_TIME NUMBER(13) NULL,
    PRIORITY NUMBER(13) NULL,
    TRIGGER_STATE VARCHAR2(16) NOT NULL,
    TRIGGER_TYPE VARCHAR2(8) NOT NULL,
    START_TIME NUMBER(13) NOT NULL,
    END_TIME NUMBER(13) NULL,
    CALENDAR_NAME VARCHAR2(200) NULL,
    MISFIRE_INSTR NUMBER(2) NULL,
    JOB_DATA BLOB NULL,
    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (JOB_NAME,JOB_GROUP) 
	REFERENCES QRTZ_JOB_DETAILS(JOB_NAME,JOB_GROUP) 
);
CREATE TABLE qrtz_simple_triggers(
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    REPEAT_COUNT NUMBER(7) NOT NULL,
    REPEAT_INTERVAL NUMBER(12) NOT NULL,
    TIMES_TRIGGERED NUMBER(7) NOT NULL,
    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP) 
	REFERENCES QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)
);
CREATE TABLE qrtz_cron_triggers(
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    CRON_EXPRESSION VARCHAR2(120) NOT NULL,
    TIME_ZONE_ID VARCHAR2(80),
    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP) 
	REFERENCES QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)
);
CREATE TABLE qrtz_blob_triggers(
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    BLOB_DATA BLOB NULL,
    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP) 
    REFERENCES QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)
);
CREATE TABLE qrtz_trigger_listeners(
    TRIGGER_NAME  VARCHAR2(200) NOT NULL, 
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    TRIGGER_LISTENER VARCHAR2(200) NOT NULL,
    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP,TRIGGER_LISTENER),
    FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP) 
	REFERENCES QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)
);
CREATE TABLE qrtz_calendars(
    CALENDAR_NAME  VARCHAR2(200) NOT NULL, 
    CALENDAR BLOB NOT NULL,
    PRIMARY KEY (CALENDAR_NAME)
);
CREATE TABLE qrtz_paused_trigger_grps(
    TRIGGER_GROUP  VARCHAR2(200) NOT NULL, 
    PRIMARY KEY (TRIGGER_GROUP)
);
CREATE TABLE qrtz_fired_triggers (
    ENTRY_ID VARCHAR2(95) NOT NULL,
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    IS_VOLATILE VARCHAR2(1) NOT NULL,
    INSTANCE_NAME VARCHAR2(200) NOT NULL,
    FIRED_TIME NUMBER(13) NOT NULL,
    PRIORITY NUMBER(13) NOT NULL,
    STATE VARCHAR2(16) NOT NULL,
    JOB_NAME VARCHAR2(200) NULL,
    JOB_GROUP VARCHAR2(200) NULL,
    IS_STATEFUL VARCHAR2(1) NULL,
    REQUESTS_RECOVERY VARCHAR2(1) NULL,
    PRIMARY KEY (ENTRY_ID)
);
CREATE TABLE qrtz_scheduler_state (
    INSTANCE_NAME VARCHAR2(200) NOT NULL,
    LAST_CHECKIN_TIME NUMBER(13) NOT NULL,
    CHECKIN_INTERVAL NUMBER(13) NOT NULL,
    PRIMARY KEY (INSTANCE_NAME)
);
CREATE TABLE qrtz_locks(
    LOCK_NAME  VARCHAR2(40) NOT NULL, 
    PRIMARY KEY (LOCK_NAME)
);

INSERT INTO qrtz_locks values('TRIGGER_ACCESS');
INSERT INTO qrtz_locks values('JOB_ACCESS');
INSERT INTO qrtz_locks values('CALENDAR_ACCESS');
INSERT INTO qrtz_locks values('STATE_ACCESS');
INSERT INTO qrtz_locks values('MISFIRE_ACCESS');

SELECT * FROM QRTZ_JOB_DETAILS;
DELETE FROM QRTZ_JOB_DETAILS;
INSERT INTO QRTZ_JOB_DETAILS VALUES ('name-1', 'group-1', 'qrtz job detail description', 'org.class.ClassName', '1','1','1','1',to_blob('1111111110000111'));
INSERT INTO QRTZ_JOB_DETAILS VALUES ('name-1', 'group-2', 'qrtz job detail description', 'org.class.ClassName', '1','1','1','1',to_blob('1111111110000111'));
INSERT INTO QRTZ_JOB_DETAILS VALUES ('name-1', 'group-3', 'qrtz job detail description', 'org.class.ClassName', '1','1','1','1',to_blob('1111111110000111'));
INSERT INTO QRTZ_JOB_DETAILS VALUES ('name-2', 'group-1', 'qrtz job detail description', 'org.class.ClassName', '1','1','1','1',to_blob('1111111110000111'));
INSERT INTO QRTZ_JOB_DETAILS VALUES ('name-3', 'group-1', 'qrtz job detail description', 'org.class.ClassName', '1','1','1','1',to_blob('1111111110000111'));

SELECT * FROM qrtz_job_listeners;
INSERT INTO qrtz_job_listeners VALUES('name-1', 'group-1', 'listener-1');
INSERT INTO qrtz_job_listeners VALUES('name-1', 'group-1', 'listener-2');
INSERT INTO qrtz_job_listeners VALUES('name-1', 'group-2', 'listener-1');
INSERT INTO qrtz_job_listeners VALUES('name-1', 'group-3', 'listener-1');
INSERT INTO qrtz_job_listeners VALUES('name-2', 'group-1', 'listener-1');
INSERT INTO qrtz_job_listeners VALUES('name-2', 'group-1', 'listener-2');
INSERT INTO qrtz_job_listeners VALUES('name-3', 'group-1', 'listener-1');

SELECT * FROM qrtz_triggers;
INSERT INTO qrtz_triggers VALUES('t-name-1', 't-group-1','name-1', 'group-1', '1', 'triger description', 12345, 12345, 12345, 'state', 'type', 12345, 12345,'cal name', 1, to_blob('1111111110000111'));
INSERT INTO qrtz_triggers VALUES('t-name-1', 't-group-2','name-1', 'group-1', '1', 'triger description', 12345, 12345, 12345, 'state', 'type', 12345, 12345,'cal name', 1, to_blob('1111111110000111'));
INSERT INTO qrtz_triggers VALUES('t-name-1', 't-group-3','name-1', 'group-1', '1', 'triger description', 12345, 12345, 12345, 'state', 'type', 12345, 12345,'cal name', 1, to_blob('1111111110000111'));
INSERT INTO qrtz_triggers VALUES('t-name-2', 't-group-1','name-1', 'group-1', '1', 'triger description', 12345, 12345, 12345, 'state', 'type', 12345, 12345,'cal name', 1, to_blob('1111111110000111'));
INSERT INTO qrtz_triggers VALUES('t-name-3', 't-group-1','name-1', 'group-1', '1', 'triger description', 12345, 12345, 12345, 'state', 'type', 12345, 12345,'cal name', 1, to_blob('1111111110000111'));
INSERT INTO qrtz_triggers VALUES('t-name-4', 't-group-1','name-1', 'group-1', '1', 'triger description', 12345, 12345, 12345, 'state', 'type', 12345, 12345,'cal name', 1, to_blob('1111111110000111'));
INSERT INTO qrtz_triggers VALUES('t-name-5', 't-group-1','name-1', 'group-1', '1', 'triger description', 12345, 12345, 12345, 'state', 'type', 12345, 12345,'cal name', 1, to_blob('1111111110000111'));
INSERT INTO qrtz_triggers VALUES('t-name-6', 't-group-1','name-1', 'group-1', '1', 'triger description', 12345, 12345, 12345, 'state', 'type', 12345, 12345,'cal name', 1, to_blob('1111111110000111'));

SELECT * FROM qrtz_simple_triggers;
INSERT INTO qrtz_simple_triggers VALUES('t-name-1', 't-group-1',123,123,123);
INSERT INTO qrtz_simple_triggers VALUES('t-name-1', 't-group-2',123,123,123);
INSERT INTO qrtz_simple_triggers VALUES('t-name-1', 't-group-3',123,123,123);
INSERT INTO qrtz_simple_triggers VALUES('t-name-2', 't-group-1',123,123,123);
INSERT INTO qrtz_simple_triggers VALUES('t-name-3', 't-group-1',123,123,123);
INSERT INTO qrtz_simple_triggers VALUES('t-name-4', 't-group-1',123,123,123);
INSERT INTO qrtz_simple_triggers VALUES('t-name-5', 't-group-1',123,123,123);

SELECT * FROM qrtz_cron_triggers;
INSERT INTO qrtz_cron_triggers VALUES('t-name-1', 't-group-1','expression','zone id');
INSERT INTO qrtz_cron_triggers VALUES('t-name-1', 't-group-2','expression','zone id');
INSERT INTO qrtz_cron_triggers VALUES('t-name-1', 't-group-3','expression','zone id');
INSERT INTO qrtz_cron_triggers VALUES('t-name-2', 't-group-1','expression','zone id');
INSERT INTO qrtz_cron_triggers VALUES('t-name-3', 't-group-1','expression','zone id');
INSERT INTO qrtz_cron_triggers VALUES('t-name-4', 't-group-1','expression','zone id');
INSERT INTO qrtz_cron_triggers VALUES('t-name-5', 't-group-1','expression','zone id');

SELECT * FROM qrtz_blob_triggers;
INSERT INTO qrtz_blob_triggers VALUES('t-name-1', 't-group-1',to_blob('1111111110000111'));
INSERT INTO qrtz_blob_triggers VALUES('t-name-1', 't-group-2',to_blob('1111111110000111'));
INSERT INTO qrtz_blob_triggers VALUES('t-name-1', 't-group-3',to_blob('1111111110000111'));
INSERT INTO qrtz_blob_triggers VALUES('t-name-2', 't-group-1',to_blob('1111111110000111'));
INSERT INTO qrtz_blob_triggers VALUES('t-name-3', 't-group-1',to_blob('1111111110000111'));
INSERT INTO qrtz_blob_triggers VALUES('t-name-4', 't-group-1',to_blob('1111111110000111'));
INSERT INTO qrtz_blob_triggers VALUES('t-name-5', 't-group-1',to_blob('1111111110000111'));

SELECT * FROM qrtz_trigger_listeners;
INSERT INTO qrtz_trigger_listeners VALUES('t-name-1', 't-group-1', 'listener-1');
INSERT INTO qrtz_trigger_listeners VALUES('t-name-1', 't-group-2', 'listener-2');
INSERT INTO qrtz_trigger_listeners VALUES('t-name-1', 't-group-3', 'listener-3');
INSERT INTO qrtz_trigger_listeners VALUES('t-name-2', 't-group-1', 'listener-1');
INSERT INTO qrtz_trigger_listeners VALUES('t-name-3', 't-group-1', 'listener-1');
INSERT INTO qrtz_trigger_listeners VALUES('t-name-4', 't-group-1', 'listener-1');
INSERT INTO qrtz_trigger_listeners VALUES('t-name-5', 't-group-1', 'listener-1');

SELECT * FROM qrtz_calendars;
INSERT INTO qrtz_calendars VALUES('name-1', to_blob('1111111110000111'));
INSERT INTO qrtz_calendars VALUES('name-2', to_blob('1111111110000111'));
INSERT INTO qrtz_calendars VALUES('name-3', to_blob('1111111110000111'));
INSERT INTO qrtz_calendars VALUES('name-4', to_blob('1111111110000111'));
INSERT INTO qrtz_calendars VALUES('name-5', to_blob('1111111110000111'));
INSERT INTO qrtz_calendars VALUES('name-6', to_blob('1111111110000111'));
INSERT INTO qrtz_calendars VALUES('name-7', to_blob('1111111110000111'));
INSERT INTO qrtz_calendars VALUES('name-8', to_blob('1111111110000111'));
INSERT INTO qrtz_calendars VALUES('name-9', to_blob('1111111110000111'));

SELECT * FROM qrtz_paused_trigger_grps;
INSERT INTO qrtz_paused_trigger_grps VALUES('t-group-1');
INSERT INTO qrtz_paused_trigger_grps VALUES('t-group-2');
INSERT INTO qrtz_paused_trigger_grps VALUES('t-group-3');
INSERT INTO qrtz_paused_trigger_grps VALUES('t-group-4');
INSERT INTO qrtz_paused_trigger_grps VALUES('t-group-5');
INSERT INTO qrtz_paused_trigger_grps VALUES('t-group-6');
INSERT INTO qrtz_paused_trigger_grps VALUES('t-group-7');
INSERT INTO qrtz_paused_trigger_grps VALUES('t-group-8');
INSERT INTO qrtz_paused_trigger_grps VALUES('t-group-9');

SELECT * FROM qrtz_fired_triggers;
INSERT INTO qrtz_fired_triggers VALUES('id-1', 'name', 'group','1','in-name',1234,1234,'state','jname','jgroup','1','1');
INSERT INTO qrtz_fired_triggers VALUES('id-2', 'name', 'group','1','in-name',1234,1234,'state','jname','jgroup','1','1');
INSERT INTO qrtz_fired_triggers VALUES('id-3', 'name', 'group','1','in-name',1234,1234,'state','jname','jgroup','1','1');
INSERT INTO qrtz_fired_triggers VALUES('id-4', 'name', 'group','1','in-name',1234,1234,'state','jname','jgroup','1','1');
INSERT INTO qrtz_fired_triggers VALUES('id-5', 'name', 'group','1','in-name',1234,1234,'state','jname','jgroup','1','1');
INSERT INTO qrtz_fired_triggers VALUES('id-6', 'name', 'group','1','in-name',1234,1234,'state','jname','jgroup','1','1');
INSERT INTO qrtz_fired_triggers VALUES('id-7', 'name', 'group','1','in-name',1234,1234,'state','jname','jgroup','1','1');
INSERT INTO qrtz_fired_triggers VALUES('id-8', 'name', 'group','1','in-name',1234,1234,'state','jname','jgroup','1','1');
INSERT INTO qrtz_fired_triggers VALUES('id-9', 'name', 'group','1','in-name',1234,1234,'state','jname','jgroup','1','1');

SELECT * FROM qrtz_scheduler_state;
INSERT INTO qrtz_scheduler_state VALUES('name-1',123,123);
INSERT INTO qrtz_scheduler_state VALUES('name-2',123,123);
INSERT INTO qrtz_scheduler_state VALUES('name-3',123,123);
INSERT INTO qrtz_scheduler_state VALUES('name-4',123,123);
INSERT INTO qrtz_scheduler_state VALUES('name-5',123,123);
INSERT INTO qrtz_scheduler_state VALUES('name-6',123,123);
INSERT INTO qrtz_scheduler_state VALUES('name-7',123,123);
INSERT INTO qrtz_scheduler_state VALUES('name-8',123,123);
INSERT INTO qrtz_scheduler_state VALUES('name-9',123,123);

SELECT * FROM qrtz_locks;

create table blob_table(
  id number primary key,
  blob_cl blob not null
);
insert into blob_table values(1,to_blob('11111000011111'));
-- qrtz_job_details
SELECT JOB_NAME, JOB_GROUP, DESCRIPTION, JOB_CLASS_NAME, IS_DURABLE, IS_VOLATILE, IS_STATEFUL, REQUESTS_RECOVERY, JOB_DATA FROM QRTZ_JOB_DETAILS;
SELECT JOB_NAME, JOB_GROUP, JOB_LISTENER FROM (SELECT ROWNUM r, JOB_NAME, JOB_GROUP, JOB_LISTENER FROM QRTZ_JOB_LISTENERS)WHERE r >= ? AND r < ?
SELECT TRIGGER_NAME, TRIGGER_GROUP, JOB_NAME, JOB_GROUP, IS_VOLATILE, DESCRIPTION, NEXT_FIRE_TIME, PREV_FIRE_TIME, PRIORITY, TRIGGER_STATE, TRIGGER_TYPE, START_TIME, END_TIME, CALENDAR_NAME, MISFIRE_INSTR, JOB_DATA FROM (SELECT ROWNUM r, TRIGGER_NAME, TRIGGER_GROUP, JOB_NAME, JOB_GROUP, IS_VOLATILE, DESCRIPTION, NEXT_FIRE_TIME, PREV_FIRE_TIME, PRIORITY, TRIGGER_STATE, TRIGGER_TYPE, START_TIME, END_TIME, CALENDAR_NAME, MISFIRE_INSTR, JOB_DATA FROM QRTZ_TRIGGERS)WHERE r >= 1 AND r < 2
INSERT INTO QRTZ_TRIGGERS
SELECT TRIGGER_NAME, TRIGGER_GROUP, REPEAT_COUNT, REPEAT_INTERVAL, TIMES_TRIGGERED FROM(SELECT ROWNUM r, TRIGGER_NAME, TRIGGER_GROUP, REPEAT_COUNT, REPEAT_INTERVAL, TIMES_TRIGGERED FROM QRTZ_SIMPLE_TRIGGERS)
SELECT TRIGGER_NAME, TRIGGER_GROUP,CRON_EXPRESSION, TIME_ZONE_ID FROM(SELECT ROWNUM r, TRIGGER_NAME, TRIGGER_GROUP,CRON_EXPRESSION, TIME_ZONE_ID FROM QRTZ_CRON_TRIGGERS)
SELECT TRIGGER_NAME, TRIGGER_GROUP, BLOB_DATA FROM(SELECT ROWNUM r,TRIGGER_NAME, TRIGGER_GROUP, BLOB_DATA FROM QRTZ_BLOB_TRIGGERS)
SELECT TRIGGER_NAME, TRIGGER_GROUP, TRIGGER_LISTENER FROM (SELECT TRIGGER_NAME, TRIGGER_GROUP, TRIGGER_LISTENER FROM QRTZ_TRIGGER_LISTENERS)
SELECT TRIGGER_GROUP FROM (SELECT ROWNUM r, TRIGGER_GROUP FROM QRTZ_PAUSED_TRIGGER_GRPS)
SELECT ENTRY_ID, TRIGGER_NAME, TRIGGER_GROUP, IS_VOLATILE, INSTANCE_NAME, FIRED_TIME, PRIORITY, STATE, JOB_NAME, JOB_GROUP, IS_STATEFUL, REQUESTS_RECOVERY FROM(SELECT ROWNUM r, ENTRY_ID, TRIGGER_NAME, TRIGGER_GROUP, IS_VOLATILE, INSTANCE_NAME, FIRED_TIME, PRIORITY, STATE, JOB_NAME, JOB_GROUP, IS_STATEFUL, REQUESTS_RECOVERY FROM QRTZ_FIRED_TRIGGERS)
SELECT INSTANCE_NAME, LAST_CHECKIN_TIME, CHECKIN_INTERVAL FROM (SELECT ROWNUM r, INSTANCE_NAME, LAST_CHECKIN_TIME, CHECKIN_INTERVAL FROM QRTZ_SCHEDULER_STATE) 

SELECT JOB_NAME, JOB_GROUP, DESCRIPTION, JOB_CLASS_NAME, IS_DURABLE, IS_VOLATILE, IS_STATEFUL, REQUESTS_RECOVERY, JOB_DATA FROM(SELECT ROWNUM r, JOB_NAME, JOB_GROUP, DESCRIPTION, JOB_CLASS_NAME, IS_DURABLE, IS_VOLATILE, IS_STATEFUL, REQUESTS_RECOVERY, JOB_DATA FROM QRTZ_JOB_DETAILS)
SELECT JOB_NAME, JOB_GROUP, DESCRIPTION, JOB_CLASS_NAME, IS_DURABLE, IS_VOLATILE, IS_STATEFUL, REQUESTS_RECOVERY, JOB_DATA FROM(SELECT ROWNUM r, JOB_NAME, JOB_GROUP, DESCRIPTION, JOB_CLASS_NAME, IS_DURABLE, IS_VOLATILE, IS_STATEFUL, REQUESTS_RECOVERY, JOB_DATA FROM QRTZ_JOB_DETAILS) WHERE r >= 1 AND r < 51
SELECT JOB_NAME, JOB_GROUP, DESCRIPTION, JOB_CLASS_NAME, IS_DURABLE, IS_VOLATILE, IS_STATEFUL, REQUESTS_RECOVERY, JOB_DATA FROM(SELECT ROWNUM r, JOB_NAME, JOB_GROUP, DESCRIPTION, JOB_CLASS_NAME, IS_DURABLE, IS_VOLATILE, IS_STATEFUL, REQUESTS_RECOVERY, JOB_DATA FROM QRTZ_JOB_DETAILS) WHERE r >= 1 AND r < 51

SELECT * FROM QRTZ_JOB_DETAILS;
SELECT * FROM QRTZ_JOB_LISTENERS;
SELECT * FROM QRTZ_TRIGGERS;
SELECT * FROM QRTZ_SIMPLE_TRIGGERS;
SELECT * FROM QRTZ_CRON_TRIGGERS;
SELECT * FROM QRTZ_BLOB_TRIGGERS;
SELECT * FROM QRTZ_TRIGGER_LISTENERS;
SELECT * FROM QRTZ_CALENDARS;
SELECT * FROM QRTZ_PAUSED_TRIGGER_GRPS;
SELECT * FROM QRTZ_FIRED_TRIGGERS;
SELECT * FROM QRTZ_SCHEDULER_STATE;
SELECT * FROM QRTZ_LOCKS;

DELETE FROM QRTZ_JOB_LISTENERS;
DELETE FROM QRTZ_JOB_DETAILS;
DELETE FROM QRTZ_SIMPLE_TRIGGERS;
DELETE FROM QRTZ_CRON_TRIGGERS;
DELETE FROM QRTZ_FIRED_TRIGGERS;
DELETE FROM QRTZ_BLOB_TRIGGERS;
DELETE FROM QRTZ_TRIGGER_LISTENERS;
DELETE FROM QRTZ_TRIGGERS;
DELETE FROM QRTZ_CALENDARS;
DELETE FROM QRTZ_PAUSED_TRIGGER_GRPS;
DELETE FROM QRTZ_SCHEDULER_STATE;



SELECT * FROM MIGRATIONPROCLOG;
DELETE FROM MIGRATIONPROCLOG;
DROP TABLE MIGRATIONPROCLOG;
SELECT COUNT(*) FROM ORDER_;
 

SELECT * FROM ACTIONS;
SELECT * FROM EXECUTIONPLAN;
SELECT * FROM ORCHSUBJECT;

create table MIGRATIONPROCLOG (
        HID number(19,0) not null,
        MIGKEY varchar2(255 char),
        MIGROW number(19,0),
        MIGTYPE number(10,0),
        primary key (HID)
    );
 select * from MIGRATIONPROCLOG;
 
SELECT MIGRATIONPROCLOG.HID FROM MIGRATIONPROCLOG WHERE MIGRATIONPROCLOG.MIGKEY = ? MIGRATIONPROCLOG.MIGTYPE = ?
SELECT ROWNUM r, extractValue(data, '/executionPlan/executionPlanHeader/uniqueID') target FROM executionplan WHERE 1=1 ;
SELECT target FROM (SELECT ROWNUM r, extractValue(data, '/executionPlan/executionPlanHeader/uniqueID') target FROM executionplan WHERE 1=1 ) WHERE r >= 1 AND r < 10000";

//---- performance
create table migtest(
 HID number(19,0) not null,
 MIGKEY varchar2(255 char),
 primary key (HID)
);
insert into migtest values(1001, 'kylin');
insert into migtest values(1002, 'kylin');
insert into migtest values(1003, 'kylin');

select * from migtest;

alter table migtest
add(
MIGROWS number(19,0) default 0
)
drop table migtest;

alter table ORDERS add(MIGROWS number(19,0) default 0)
alter table ORDERS drop(MIGROWS)

alter table EXECUTIONPLAN add(MIGROWS number(19,0) default 0)
alter table EXECUTIONPLAN drop(MIGROWS)

alter table COMPONENT add(MIGROWS number(19,0) default 0)
alter table COMPONENT drop(MIGROWS)

SELECT extract(data, '/') FROM orders WHERE 1=1  AND  (extractValue(data, '/order/header/orderHeader/orderRef') LIKE 'testAAA-1-%' ESCAPE '/'  OR extractValue(data, '/order/header/orderHeader/orderRef') = 'testAAA-0-4' )   AND  (extractValue(data, '/order/header/status') = 'COMPLETE'  OR extractValue(data, '/order/header/status') = 'TEMPLATE' )   AND  ( extractValue(data, '/order/header/statusChanged')> to_date('2008-06-20T07:31:00','YYYY-MM-DD"T"HH24:MI:SS') )  
UPDATE ORDERS 

SELECT COUNT(1) FROM ORDER_;
SELECT COUNT(1) FROM EXECUTIONPLAN;
SELECT COUNT(1) FROM COMPONENT;
SELECT COUNT(1) FROM ORCHSUBJECT;
SELECT COUNT(1) FROM JMSEXCEPTIONS;


SELECT * FROM EXECUTIONPLAN;
SELECT * FROM MIGRATIONPROCLOG;

select * from property;
delete from property;
INSERT INTO PROPERTY VALUES(1, 1, 1, 'eq', 'qw');
select * from subjectdef_to_property;
select * from Executionplan;


